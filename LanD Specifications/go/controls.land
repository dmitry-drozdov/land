COMMENT		: COMMENT_L|COMMENT_ML
COMMENT_L	: '//' ~[\n\r]*
COMMENT_ML	: '/*' .*? '*/'

ITALIC_QUOTE : '`' .*? '`'

ADDRESS		: '&'
QUOTE		: '"'
SPREAD 		: '...'

//SQUARE_BRACKETED : %left ('['|GENERAL_ATTRIBUTE_START) %right ']'

// важно пропускать строки и символы, так как в них могут быть [{(, что нарушит парность скобок
STRING		: STRING_STD
STRING_STD	: '"' ('\\"'|'\\\\'|.)*? '"'

CHAR		: '\'' ('\\\''|'\\\\'|.)*? '\''
ID			: '@'?[_a-zA-Z\u0430-\u044F\u0410-\u042F\u0192\u06F0\u03A9][_0-9a-zA-Z\u0430-\u044F\u0410-\u042F.\u0192\u06F0\u03A9\u1600-\u1700]*


CURVE_BRACKETED : %left '{' %right '}'
ROUND_BRACKETED : %left '(' %right ')'

content	= entity*
entity	= if | for | switch | select | anon_func | block | Any 
		| '(' entity* ')'

block = '{' entity*  '}'

if = 'if' cond* block else?
else = 'else' (if | block)

for = 'for' cond* block
switch = 'switch' cond* block
select = 'select' block

cond = Any | '(' (cond | '{' cond* '}')* ')' | init | anon_func 
init =  anon_struct '{' Any '}'
	| ('[' Any ']')+ type  ('{' Any '}')? 

type = '*' Any | ID Any | anon_struct | anon_func_title | '(' type ')'

anon_struct = '&'? ('struct'|'interface') '{' Any '}'

anon_func = anon_func_title block ('(' Any ')')?
anon_func_title = 'func' '(' Any ')' ('(' Any ')')? AnyAvoid('\n')

%%

%parsing {
	recovery
	fragment 
	start content
	skip COMMENT STRING CHAR ADDRESS 
}

%nodes {
	ghost entity 
	leaf 
	void
}



%markup {
	land 
	headercore(f_name) 
}
