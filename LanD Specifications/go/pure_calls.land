COMMENT		: COMMENT_L|COMMENT_ML
COMMENT_L	: '//' ~[\n\r]*
COMMENT_ML	: '/*' .*? '*/'

ITALIC_QUOTE : '`' .*? '`'

QUOTE		: '"'
SPREAD 		: '...'

// чтобы пропускать этот токен
VAR: 'var'
CONST: 'const'
IF : 'if' 
FOR: 'for'
SWITCH: 'switch'
CASE: 'case'
RETURN: 'return'
NL: '\n'
GO: 'go'
RANGE: 'range'
FUNC: 'func'


// важно пропускать строки и символы, так как в них могут быть [{(, что нарушит парность скобок
STRING		: STRING_STD
STRING_STD	: '"' ('\\"'|'\\\\'|.)*? '"'

CHAR		: '\'' ('\\\''|'\\\\'|.)*? '\''

CURVE_BRACKETED : %left '{' %right '}'
ROUND_BRACKETED : %left '(' %right ')'
SQUARE_BRACKETED : %left '[' %right ']'

ID: [a-zA-Z_\u0192\u1684-\u1697\u0370-\u03FF][a-zA-Z0-9_\u0192\u1684-\u1697\u0370-\u03FF]*



content	= entity*

entity =  call | smth
		 |  interface // rubbish
		 | '(' entity* ')'
		 | '[' entity* ']'
		 | '{' entity* '}'
		 | Any


call = smth ('(' Any ')')+

smth =  ID ('[' entity* ']')* ('.' smth2)?
	
	

smth2 =  ID ('[' entity* ']')* ('.' smth2)?
	| '(' Any ')'


interface = 'interface' '{' Any '}'

// TODO: добавить в файл tests тесты из PhD google doc

%%

%parsing {
	recovery
	fragment 
	start content
	skip COMMENT STRING CHAR
}

%nodes {
	ghost entity 
	leaf
	void 
}



%markup {
	land 
	headercore(f_name) 
}
