COMMENT		: COMMENT_L|COMMENT_ML
COMMENT_L	: '//' ~[\n\r]*
COMMENT_ML	: '/*' .*? '*/'

ITALIC_QUOTE : '`' .*? '`'

QUOTE		: '"'
SPREAD 		: '...'

// важно пропускать строки и символы, так как в них могут быть [{(, что нарушит парность скобок

STRING		: STRING_STD
STRING_STD	: '"' ('\\"'|'\\\\'|.)*? '"'

CHAR		: '\'' ('\\\''|'\\\\'|.)*? '\''

CURVE_BRACKETED : %left '{' %right '}'
ROUND_BRACKETED : %left '(' %right ')'
//SQUARE_BRACKETED : %left ('['|GENERAL_ATTRIBUTE_START) %right ']'


content	= entity*

entity = Any | anon_func | '{' entity* '}' |  '(' entity* ')'

anon_func = 'func' '(' Any ')'  (AnyAvoid('\n')|struct|interface)* '{' Any '}' '(' Any ')' 
			
			// \n нужно для кейса когда есть строка var unpackWrapper func(f images.Handler) images.Handler


struct = 'struct' '{' Any '}'
interface = 'interface' '{' Any '}'

%%

%parsing {
	recovery
	fragment 
	start content
	skip COMMENT STRING CHAR
}

%nodes {
	ghost entity 
	leaf 
	void
}



%markup {
	land 
	headercore(f_name) 
}
