COMMENT		: COMMENT_L|COMMENT_ML
COMMENT_L	: '//' ~[\n\r]*
COMMENT_ML	: '/*' .*? '*/'

ITALIC_QUOTE : '`' .*? '`'

QUOTE		: '"'
SPREAD 		: '...'

STRING		: STRING_STD
STRING_STD	: '"' ('\\"'|'\\\\'|.)*? '"'

CHAR		: '\'' ('\\\''|'\\\\'|.)*? '\''
CLASS_STRUCT_INTERFACE : 'struct'|'interface'
ID			: '@'?[_a-zA-Z\u0430-\u044F\u0410-\u042F\u0192\u06F0\u03A9][_0-9a-zA-Z\u0430-\u044F\u0410-\u042F.\u0192\u06F0\u03A9\u1600-\u1700]*


LB			: '('
RB			: ')'
 
CURVE_BRACKETED : %left '{' %right '}'
ROUND_BRACKETED : %left '(' %right ')'
SQUARE_BRACKETED : %left ('['|GENERAL_ATTRIBUTE_START) %right ']'


NL			: '\n'

 
package_content	=	entity*
package			=	'package' package_name  package_content


entity	= water_entity | func 



func = 'func' f_name  f_args f_returns '{' '}'



f_args = LB RB
		|LB (f_arg ',')* f_arg ','? RB
		
f_arg =   go_type | go_type go_type

f_returns =  go_type 
		|LB (f_return ',')* f_return ','? RB 
f_return = go_type | go_type go_type

		


water_entity	=	Any 

package_name =	ID
import_name	 =	ID
param 		 =	ID
f_type		 =	ID | LB ID RB
f_name		 =	ID
t_name		 =	ID


go_type			= (ID 
					|LB (ID) RB
				) 



%%

%parsing {
	recovery entity 
	fragment STRING_INT_CODE
	start package
	skip COMMENT STRING NL
}

%nodes {
	ghost entity  
	leaf f_name
	void LB RB
}

%customblock {
	start("//+")
	end("//@")
	basetoken COMMENT
}

%markup {
	land func
	headercore(f_name) func
}
