DIRECTIVE	: '#' ~[\n\r]*

COMMENT		: COMMENT_L|COMMENT_ML
COMMENT_L	: '//' ~[\n\r]*
COMMENT_ML	: '/*' .*? '*/'

ITALIC_QUOTE : '`' .*? '`'

QUOTE		: '"'
SPREAD 		: '...'

STRING		: STRING_STD|STRING_VERB|STRING_INT
STRING_STD	: '"' ('\\"'|'\\\\'|.)*? '"'
STRING_VERB	: '@'('"' (~["]|'""')* '"')+
STRING_INT	: '$"' ('\\"'|'\\\\'|'{{'|STRING_INT_CODE|.)*? '"' | '$@' ('"' ('""'|'{{'|STRING_INT_CODE|.)*? '"')+
STRING_INT_CODE : '{' (STRING|CHAR|.)*? '}'

CHAR		: '\'' ('\\\''|'\\\\'|.)*? '\''
CLASS_STRUCT_INTERFACE : 'struct'|'interface'
ID			: '@'?[_a-zA-Z\u0430-\u044F\u0410-\u042F\u0192\u06F0\u03A9][_0-9a-zA-Z\u0430-\u044F\u0410-\u042F.\u0192\u06F0\u03A9]*

GENERAL_ATTRIBUTE_START	:	'[' [ \t\r\f\n]*? ('assembly'|'module')
 
CURVE_BRACKETED : %left '{' %right '}'
ROUND_BRACKETED : %left '(' %right ')'
SQUARE_BRACKETED : %left ('['|GENERAL_ATTRIBUTE_START) %right ']'

HEX 		: '0x'[0-9a-fA-F]+
DEC			: '-'?[0-9]+

NL			: '\n'
 
package_content	=	entity*
package			=	'package' package_name  import*  package_content

import = 'import' AnyInclude(QUOTE) | import_list
import_list = 'import' '(' Any ')'

entity	= water_entity |  func

struct = 'type' t_name 'struct' '{' Any '}'
interface = 'type' t_name 'interface' '{' Any '}'
alias = 'type' t_name generic? '='? go_type
		|'type' t_name '[' operand? ']' go_type
		|'type' '(' Any ')'

anon_struct = 'struct' '{' Any '}'
anon_interface = 'interface' '{' Any '}'

func = 'func' f_reciever? f_name generic2? f_args f_returns ('{' Any '}')
	| 'func' f_reciever? f_name generic2? f_args f_returns NL
	| 'func' f_reciever? f_name generic2? f_args NL
anon_func = 'func' f_args f_returns '{' Any '}'
anon_func_title = 'func' f_args f_returns



f_reciever = '(' param '*'? f_type generic2? ')' 
			|'(' '*'? f_type generic2?')'
			|'(' f_type generic2?')'  // ???

generic = '[' (sub_generic ',')* sub_generic ']'
sub_generic = '*'? ID '~'? go_type? 
			| anon

f_args = '(' ')'
		|'(' (f_arg ',')* f_arg ','? ')'
		
f_arg = ID
		|ID SPREAD? (go_type )
		|SPREAD? (go_type )

f_returns = Any 
		| go_type 
		|'(' (f_return ',')* f_return ','? ')' 
f_return = go_type | go_type go_type

		

anon = anon_func_title | anon_struct | anon_interface

func_var = 'func' f_args f_returns '{' Any '}'
struct_var = 'struct' '{' Any '}' '{' Any '}'

var = 'var' sub_var
	| 'var' '(' Any ')'
	
	
sub_var = params go_type
		| param go_type
		| param go_type? '=' '&'? (operand | (operand '(' Any ')') | (go_type '{' Any '}') | (Any | func_var | struct_var))
		| params go_type? '=' (right_var ',')* right_var
		
right_var = operand | (operand '(' Any ')') | (go_type '{' Any '}') | (Any | func_var | struct_var)		

const = 'const' param go_type? '=' Any
	| 'const' '(' Any ')'
	
sub_const = param go_type
		| param go_type? '=' operand



water_entity	=	Any 

package_name =	ID
import_name	 =	ID
param 		 =	ID
f_type		 =	ID | '(' ID ')'
f_name		 =	ID
t_name		 =	ID

params =  param (',' param)+ 

map = 'map' '[' go_type ']' go_type
	| 'map' '[' go_type ']' '(' go_type ')'
chan = 	'chan' go_type
		| 'chan<-' go_type
		| '<-chan' go_type

go_type			= (ID 
					| arr_ptr* (ID | anon | map | chan) 
					| arr_ptr* '(' (ID | anon | map | chan) ')'  
				) generic2?

go_type_func	= ID | anon | map | chan

arr_ptr			= '*'* ('[' DEC? SPREAD? ID? ']' '*'*)*

generic2		= '[' Any ']'

operand			= ITALIC_QUOTE | STRING | CHAR | HEX | DEC | ID

%%

%parsing {
	recovery entity 
	fragment STRING_INT_CODE
	start package
	skip COMMENT STRING DIRECTIVE NL
}

%nodes {
	ghost entity anon
	leaf 
}

%customblock {
	start("//+")
	end("//@")
	basetoken COMMENT
}
