DIRECTIVE	: '#' ~[\n\r]*

COMMENT		: COMMENT_L|COMMENT_ML
COMMENT_L	: '//' ~[\n\r]*
COMMENT_ML	: '/*' .*? '*/'

INT			: [0-9]+

STRING		: STRING_STD|STRING_VERB|STRING_INT
STRING_STD	: '"' ('\\"'|'\\\\'|.)*? '"'
STRING_VERB	: '@'('"' (~["]|'""')* '"')+
STRING_INT	: '$"' ('\\"'|'\\\\'|'{{'|STRING_INT_CODE|.)*? '"' | '$@' ('"' ('""'|'{{'|STRING_INT_CODE|.)*? '"')+
STRING_INT_CODE : '{' (STRING|CHAR|.)*? '}'

CHAR		: '\'' ('\\\''|'\\\\'|.)*? '\''
MODIFIER	: 'ref'|'fixed'|'public'|'private'|'protected'|'internal'|'static'|'virtual'|'const'|'override'|'new'|'sealed'|'unsafe'|'readonly'|'abstract'|'volatile'|'async'|'partial'
CLASS_STRUCT_INTERFACE : 'class'|'struct'|'record'|'interface'
ID			: '@'?[_a-zA-Z\u0430-\u044F\u0410-\u042F][_0-9a-zA-Z\u0430-\u044F\u0410-\u042F.]*

GENERAL_ATTRIBUTE_START	:	'[' [ \t\r\f\n]*? ('assembly'|'module')
 
CURVE_BRACKETED : %left '{' %right '}'
ROUND_BRACKETED : %left '(' %right ')'
SQUARE_BRACKETED : %left ('['|GENERAL_ATTRIBUTE_START) %right ']'



 
package_content	=	entity*
package			=	'package' package_name  import  package_content

import = 'import' import_name | import_list
import_list = 'import' '(' Any ')'

entity	= water_entity | alias | struct | interface | var | func

struct = 'type' t_name 'struct' '{' Any '}'
interface = 'type' t_name 'interface' '{' Any '}'
alias = 'type' t_name go_type

anon_struct = 'struct' '{' Any '}'
anon_interface = 'interface' '{' Any '}'

func = 'func' f_reciever* f_name f_args f_returns '{' Any '}'
anon_func = 'func' f_args f_returns '{' Any '}'
anon_func_title = 'func' f_args f_returns

map = 'map' '[' go_type ']' go_type
chan = 	'chan' go_type
		| 'chan<-' go_type
		| '<-chan' go_type

f_reciever = '(' param '*'? f_type ')' 

f_args = '(' ')'
		|'(' (f_arg ',')* f_arg ')'
f_arg = (ID go_type) | go_type

f_returns = Any 
		| go_type
		|'(' (f_return ',')* f_return ')' 
f_return = f_arg

anon = anon_func_title | anon_struct | anon_interface

var = 'var' param go_type
	| 'var' param go_type? '=' AnyExcept('var', 'const', 'func', 'type')
	| 'var' param go_type? '=' 'func' f_args f_returns '{' Any '}'
	| 'var' '(' Any ')'


water_entity	=	Any

package_name =	ID
import_name	 =	ID
param 		 =	ID
f_type		 =	ID
f_name		 =	ID
t_name		 =	ID

go_type			= ID | arr_ptr* (ID | anon | map | chan)

arr_ptr			= '*'* ('[' INT? ']' '*'*)*


%%

%parsing {
	recovery entity 
	fragment STRING_INT_CODE
	start package
	skip COMMENT STRING DIRECTIVE
}

%nodes {
	ghost entity
	leaf 
}

%customblock {
	start("//+")
	end("//-")
	basetoken COMMENT
}
